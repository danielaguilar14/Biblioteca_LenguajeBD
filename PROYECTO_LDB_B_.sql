-- Tabla de Usuarios
CREATE TABLE USUARIOS (
    ID_USUARIO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    CORREO VARCHAR2(100) UNIQUE NOT NULL,
    TELEFONO VARCHAR2(15),
    ROL VARCHAR2(20) CHECK (ROL IN ('ADMIN', 'USUARIO'))
);
ALTER TABLE USUARIOS 
ADD (APELLIDO VARCHAR2(100));

-- Tabla de Libros
CREATE TABLE LIBROS (
    ID_LIBRO NUMBER PRIMARY KEY,
    TITULO VARCHAR2(100) NOT NULL,
    AUTOR VARCHAR2(100) NOT NULL,
    CATEGORIA VARCHAR2(50),
    DISPONIBLE CHAR(1) DEFAULT 'S' CHECK (DISPONIBLE IN ('S', 'N'))
);

-- Tabla de Préstamos
CREATE TABLE PRESTAMOS (
    ID_PRESTAMO NUMBER PRIMARY KEY,
    ID_USUARIO NUMBER,
    ID_LIBRO NUMBER,
    FECHA_PRESTAMO DATE,
    FECHA_DEVOLUCION DATE,
    CONSTRAINT FK_PRESTAMO_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT FK_PRESTAMO_LIBRO FOREIGN KEY (ID_LIBRO) REFERENCES LIBROS(ID_LIBRO)
);

-- Tabla de Reservas
CREATE TABLE RESERVAS (
    ID_RESERVA NUMBER PRIMARY KEY,
    ID_USUARIO NUMBER,
    ID_LIBRO NUMBER,
    FECHA_RESERVA DATE,
    CONSTRAINT FK_RESERVA_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT FK_RESERVA_LIBRO FOREIGN KEY (ID_LIBRO) REFERENCES LIBROS(ID_LIBRO)
);

-- Tabla de Reportes
CREATE TABLE REPORTES (
    ID_REPORTE NUMBER PRIMARY KEY,
    TIPO_REPORTE VARCHAR2(50),
    FECHA_GENERACION DATE
);

-- Tabla de Pagos
CREATE TABLE PAGOS (
    ID_PAGO NUMBER PRIMARY KEY,
    ID_USUARIO NUMBER,
    MONTO NUMBER(10, 2) NOT NULL,
    FECHA_PAGO DATE NOT NULL,
    CONSTRAINT FK_PAGO_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
);


----------------------------------
 PROCEDIMIENTOS ALMACENADOS 
----------------------------------

--1. AGREGAR USUARIO

CREATE OR REPLACE PROCEDURE SP_AGREGAR_USUARIO(
    SP_NOMBRE IN VARCHAR2,
    SP_CORREO IN VARCHAR2,
    SP_TELEFONO IN VARCHAR2,
    SP_ROL IN VARCHAR2
)
AS
    CONTADOR NUMBER := 1;
    VSUM NUMBER := 0;
BEGIN
    INSERT INTO USUARIOS(NOMBRE, CORREO, TELEFONO, ROL)
    VALUES(SP_NOMBRE, SP_CORREO, SP_TELEFONO, SP_ROL);
    
    DBMS_OUTPUT.PUT_LINE('Usuario agregado: ' || SP_NOMBRE);
    
EXCEPTION
    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('Error: No se pudo agregar el usuario. Por favor, intente de nuevo');
END;


--2. ELIMINAR USUARIO POR ID

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_USUARIO(
    SP_ID_USUARIO IN NUMBER
)
AS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT 
    FROM USUARIOS 
    WHERE ID_USUARIO = SP_ID_USUARIO;
    
    IF VCOUNT > 0 THEN
        DELETE FROM USUARIOS 
        WHERE ID_USUARIO = SP_ID_USUARIO;
      DBMS_OUTPUT.PUT_LINE('Usuario eliminado correctamente: ' || SP_ID_USUARIO);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: Usuario no encontrado.');
    END IF;
END;


--3. ACTUALIZAR DATOS USUARIO

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_USUARIO(
    SP_ID IN NUMBER,
    SP_NOMBRE IN VARCHAR2,
    SP_CORREO IN VARCHAR2,
    SP_TELEFONO IN VARCHAR2,
    SP_ROL IN VARCHAR2
)
AS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT 
    FROM USUARIOS 
    WHERE ID_USUARIO = SP_ID;
    
    IF VCOUNT > 0 THEN
        UPDATE USUARIOS
        SET NOMBRE = SP_NOMBRE, 
            CORREO = SP_CORREO, 
            TELEFONO = SP_TELEFONO, 
            ROL = SP_ROL
        WHERE ID_USUARIO = SP_ID;
        
        DBMS_OUTPUT.PUT_LINE('Datos del usuario actualizados correctamente: ' || SP_ID);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: Usuario no encontrado.');
    END IF;
END;


-- 4. AGREGAR NUEVO LIBRO
CREATE OR REPLACE PROCEDURE SP_AGREGAR_LIBRO(
    SP_ID IN NUMBER,
    SP_TITULO IN VARCHAR2,
    SP_AUTOR IN VARCHAR2,
    SP_CATEGORIA IN VARCHAR2,
    SP_DISPONIBLE IN CHAR
)
AS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT
    FROM LIBROS
    WHERE ID_LIBRO = SP_ID;
    
    IF VCOUNT = 0 THEN
    INSERT INTO LIBROS(ID_LIBRO, TITULO, AUTOR, CATEGORIA, DISPONIBLE)
        VALUES(SP_ID, SP_TITULO, SP_AUTOR, SP_CATEGORIA, SP_DISPONIBLE);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Libro agregado correctamente: ' || SP_TITULO);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: El libro con ID ' || SP_ID || ' ya existe.');
    END IF;
END;


--5. ACTUALIZAR LIBRO

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_LIBRO(
    SP_ID IN NUMBER,
    SP_TITULO IN VARCHAR2,
    SP_AUTOR IN VARCHAR2,
    SP_CATEGORIA IN VARCHAR2,
    SP_DISPONIBLE IN CHAR
)
AS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT
    FROM LIBROS
    WHERE ID_LIBRO = SP_ID;
    
    IF VCOUNT > 0 THEN
        UPDATE LIBROS
        SET TITULO = SP_TITULO,
            AUTOR = SP_AUTOR,
            CATEGORIA = SP_CATEGORIA,
            DISPONIBLE = SP_DISPONIBLE
        WHERE ID_LIBRO = SP_ID;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Libro actualizado correctamente: ' || SP_TITULO);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: El libro con ID ' || SP_ID || ' no existe.');
    END IF;
END;


-- 6. ELIMINAR LIBRO POR ID

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_LIBRO(
    SP_ID_LIBRO IN NUMBER
)
AS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT 
    FROM LIBROS
    WHERE ID_LIBRO = SP_ID_LIBRO;
    
    IF VCOUNT > 0 THEN
        DELETE FROM LIBROS
        WHERE ID_LIBRO = SP_ID_LIBRO;
      DBMS_OUTPUT.PUT_LINE('El libro ha sido eliminado correctamente: ' || SP_ID_LIBRO);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: Libro no encontrado.');
    END IF;
END;


--7. FECHA DE DEVOLUCION ACTUALIZADA

CREATE OR REPLACE PROCEDURE SP_ACTUALIZA_FECHA_DEVOLUCION(
    SP_ID_PRESTAMO IN NUMBER,
    SP_FECHA_ACTUALIZADA IN DATE
)
AS
BEGIN
    UPDATE PRESTAMOS
    SET FECHA_DEVOLUCION = SP_FECHA_ACTUALIZADA
    WHERE ID_PRESTAMO = SP_ID_PRESTAMO;
END;


--8. RESERVAR LIBRO

CREATE OR REPLACE PROCEDURE SP_RESERVAR_LIBRO(
    SP_ID_RESERVA IN NUMBER,
    SP_ID_USUARIO IN NUMBER,
    SP_ID_LIBRO IN NUMBER,
    SP_FECHA_RESERVACION IN DATE
)
AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT
    FROM RESERVAS
    WHERE ID_USUARIO = SP_ID_USUARIO
      AND ID_LIBRO = SP_ID_LIBRO
      AND FECHA_RESERVA = SP_FECHA_RESERVACION;
    
    IF V_COUNT > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Lo siento. El libro ya se encuentra reservado.');
    ELSE
        INSERT INTO RESERVAS (ID_RESERVA, ID_USUARIO, ID_LIBRO, FECHA_RESERVA)
        VALUES (SP_ID_RESERVA, SP_ID_USUARIO, SP_ID_LIBRO, SP_FECHA_RESERVACION);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Reserva realizada con éxito: ' || SP_ID_RESERVA);
    END IF;
END;


-- 9. PRESTAMO LIBRO

CREATE OR REPLACE PROCEDURE SP_PRESTAMO(
    SP_ID_PRESTAMO IN NUMBER,
    SP_ID_USUARIO IN NUMBER,
    SP_ID_LIBRO IN NUMBER,
    SP_FECHA_PRESTAMO IN DATE,
    SP_FECHA_DEVOLUCION IN DATE
)
AS
    RESERVADO NUMBER;
BEGIN
    SELECT COUNT(*) INTO RESERVADO
    FROM RESERVAS
    WHERE ID_LIBRO = SP_ID_LIBRO
    AND FECHA_RESERVA IS NOT NULL;
    
    IF RESERVADO > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Lo siento. El libro no está disponible para préstamo porque está reservado.');
        RETURN;
    END IF;
    
    INSERT INTO PRESTAMOS (ID_PRESTAMO, ID_USUARIO, ID_LIBRO, FECHA_PRESTAMO, FECHA_DEVOLUCION)
    VALUES (SP_ID_PRESTAMO, SP_ID_USUARIO, SP_ID_LIBRO, SP_FECHA_PRESTAMO, SP_FECHA_DEVOLUCION);
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Préstamo realizado con éxito: ' || SP_ID_PRESTAMO);
END;


--10. ELIMINAR PRESTAMO LIBRO

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PRESTAMO(SP_ID IN NUMBER)
AS
BEGIN
    DELETE FROM PRESTAMOS
    WHERE ID_PRESTAMO = SP_ID;
END;


--11. PRESTAMOS ACTIVOS DE UN SUUARIO

CREATE OR REPLACE PROCEDURE SP_PRESTAMOS_ACTIVOS (SP_ID_USUARIO IN NUMBER)
AS
    CURSOR C_PRESTAMOS IS
        SELECT ID_PRESTAMO
        FROM PRESTAMOS
        WHERE ID_USUARIO = SP_ID_USUARIO
        AND FECHA_DEVOLUCION IS NULL;
BEGIN
    FOR PRESTAMO IN C_PRESTAMOS LOOP
        DBMS_OUTPUT.PUT_LINE('El prestamo: ' || prestamo.ID_PRESTAMO || ' se encuentra activo');
    END LOOP;
END;


--12. VERIFICAR DISPONIBILIDAD 

CREATE OR REPLACE PROCEDURE SP_DISPONIBILIDAD (
    SP_ID_LIBRO IN NUMBER,
    SP_DISPONIBLE OUT CHAR
)
AS
    CURSOR C_LIBRO IS
        SELECT DISPONIBLE
        FROM LIBROS
        WHERE ID_LIBRO = SP_ID_LIBRO;
    VDIS CHAR(1);
BEGIN
    OPEN C_LIBRO;
    FETCH C_LIBRO 
    INTO VDIS;
    
    IF C_LIBRO%FOUND THEN
        SP_DISPONIBLE := VDIS;
    ELSE
        SP_DISPONIBLE := 'N';
    END IF;
    
    CLOSE C_LIBRO;
END;


--13. NOMBRE DE USUARIO POR ID

CREATE OR REPLACE PROCEDURE SP_NOMBRE_USUARIO(
    SP_ID_USUARIO IN NUMBER,
    SP_NOMBRE OUT VARCHAR2
)
AS 
    CURSOR C_USUARIO IS
        SELECT NOMBRE
        FROM USUARIOS
        WHERE ID_USUARIO = SP_ID_USUARIO;
    VNOM VARCHAR2(50);
BEGIN
    FOR USUARIO IN C_USUARIO LOOP
        SP_NOMBRE := USUARIO.NOMBRE;
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SP_NOMBRE := NULL;
END; 


--14. ELIMINAR RESERVA POR ID

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_RESERVA (SP_ID IN NUMBER)
AS
BEGIN
    DELETE FROM RESERVAS 
    WHERE ID_RESERVA = SP_ID;
END;


-- 15. LIBROS DISPONIBLES POR CATEGORIA

CREATE OR REPLACE PROCEDURE SP_LIBRO_DIS_CATE(SP_CATE IN VARCHAR2)
AS
BEGIN
    FOR LIBRO IN (SELECT TITULO FROM LIBROS
        WHERE CATEGORIA = SP_CATE
        AND DISPONIBLE = 'S')
    LOOP
        DBMS_OUTPUT.PUT_LINE('Libro disponible: ' || LIBRO.TITULO);
    END LOOP;
END;


--16. TOTAL LIBROS PRESTADOS

CREATE OR REPLACE PROCEDURE SP_LIBROS_PRESTADOS(SP_TOTAL OUT NUMBER)
AS
    CURSOR C_PRESTAMOS IS
        SELECT COUNT(*) AS TOTAL
        FROM PRESTAMOS
        WHERE FECHA_DEVOLUCION IS NULL;
BEGIN
    OPEN C_PRESTAMOS;
        FETCH C_PRESTAMOS INTO SP_TOTAL;
    CLOSE C_PRESTAMOS;
END;


--17. ELIMINAR REPORTE POR ID

CREATE OR REPLACE PROCEDURE ELIMINAR_REPORTE(SP_ID IN NUMBER)
AS
BEGIN
    DELETE FROM REPORTES WHERE ID_REPORTE = SP_ID;
END;


--18. PRESTAMOS POR LIBRO

CREATE OR REPLACE PROCEDURE SP_PRESTAMOS_POR_LIBRO(SP_ID_LIBRO IN NUMBER)
AS
    CURSOR C_PRESTAMOS IS
        SELECT ID_PRESTAMO, ID_USUARIO, FECHA_PRESTAMO, FECHA_DEVOLUCION
        FROM PRESTAMOS
        WHERE ID_LIBRO = SP_ID_LIBRO
        AND FECHA_DEVOLUCION IS NULL;
BEGIN
    FOR PRESTAMO IN C_PRESTAMOS LOOP
        DBMS_OUTPUT.PUT_LINE('Préstamo ID: ' || PRESTAMO.ID_PRESTAMO || ' - Usuario ID: ' || PRESTAMO.ID_USUARIO || ' - Fecha de préstamo: ' || TO_CHAR(PRESTAMO.FECHA_PRESTAMO, 'DD-MM-YYYY'));
    END LOOP;
END;
        

--19. USUARIOS POR ROL

CREATE OR REPLACE PROCEDURE SP_USER_POR_ROL(SP_ROL IN VARCHAR2)
AS
BEGIN
    FOR USUARIO IN (SELECT * FROM USUARIOS WHERE ROL = SP_ROL)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Usuario: ' || USUARIO.NOMBRE);
    END LOOP;
END;


-- 20. TODOS LOS LIBROS

CREATE OR REPLACE PROCEDURE SP_LISTA_LIBROS
AS
BEGIN
    FOR LIBRO IN(SELECT * FROM LIBROS) LOOP
        DBMS_OUTPUT.PUT_LINE('Libro: ' || LIBRO.TITULO || ' ' || LIBRO.AUTOR);
    END LOOP;
END;
 


-------------------
FUNCIONES
-------------------

--1. INSERTAR USUARIO

CREATE OR REPLACE FUNCTION FN_INSERTAR_USUARIO(
    SP_NOMBRE IN VARCHAR2,
    SP_CORREO IN VARCHAR2,
    SP_TELEFONO IN VARCHAR2,
    SP_ROL IN VARCHAR2
)
RETURN VARCHAR2
AS
    VALERTA VARCHAR2(80);
BEGIN
    SP_AGREGAR_USUARIO(SP_NOMBRE, SP_CORREO, SP_TELEFONO, SP_ROL);
    
    VALERTA := 'El usuario se ha agregado exitosamente: ' || SP_NOMBRE;
    
    RETURN VALERTA;
END;
    

--2. NOMBRE DE USUARIO POR ID

CREATE OR REPLACE FUNCTION FN_NOM_USUARIO(SP_ID_USUARIO IN NUMBER) 
RETURN VARCHAR2
IS
    VNOM VARCHAR2(50);
BEGIN
    SP_NOMBRE_USUARIO(SP_ID_USUARIO, VNOM);
    IF VNOM IS NULL THEN
        RETURN 'Usuario no encontrado';
    ELSE
        RETURN VNOM;
    END IF;
END;


--3. ACTUALIZAR DATOS DEL USUARIO

CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_USARIO (
    VID IN NUMBER,
    VNOM IN VARCHAR2,
    VCORREO IN VARCHAR2,
    VTEL IN VARCHAR2,
    VROL IN VARCHAR2
) RETURN VARCHAR2
AS
    UPDATE USUARIOS
    SET NOMBRE = VNOM, CORREO = VCORREO, TELEFONO = VTEL, ROL = VROL
    WHERE ID_USUARIO = VID;
    
    RETURN 'El usuario ha sido actualizado exitosamente';
END;


--4. USUARIOS POR ROL

CREATE OR REPLACE FUNCTION FN_USUARIOS_POR_ROL(SP_ROL IN VARCHAR2)
RETURN VARCHAR2
IS
    VRES VARCHAR2(255);
BEGIN
    FOR USUARIO IN (SELECT NOMBRE FROM USUARIOS WHERE ROL = SP_ROL)
    LOOP
        VRES := VRES || USUARIO.NOMBRE || ', ';
    END LOOP;
    
    IF VRES IS NULL THEN
        RETURN 'Lo sentimos. No hay usuarios con este rol';
    ELSE
        RETURN VRES;
    END IF;
END;


--5. TOTAL DE RESERVAS POR USUARIO

CREATE OR REPLACE FUNCTION FN_TOTAL_RESERVAS_USUARIO(SP_ID_USUARIO IN NUMBER)
RETURN NUMBER
IS
    VCONT NUMBER := 0;
BEGIN
    FOR RESERVA IN (SELECT * FROM RESERVAS WHERE ID_USUARIO = SP_ID_USUARIO)
    LOOP
        VCONT := VCONT + 1;
    END LOOP;
    
    IF VCONT = 0 THEN
        RETURN 'No tiene reservas';
    ELSE
        RETURN VCONT;
    END IF;
END;


--6. NOMBRE DE LIBRO POR ID

CREATE OR REPLACE FUNCTION FN_NOM_LIBRO(SP_ID_LIBRO IN NUMBER)
RETURN VARCHAR2
IS
    VNOM_LIBRO VARCHAR2(100);
BEGIN
    FOR LIBRO IN (SELECT TITULO FROM LIBROS WHERE ID_LIBRO = SP_ID_LIBRO)
    LOOP
        VNOM_LIBRO := LIBRO.TITULO;
    END LOOP;
    
     IF VNOM_LIBRO IS NULL THEN
        RETURN 'Lo siento. El libro no fue encontrado';
    ELSE
        RETURN VNOM_LIBRO;
    END IF;
END;


--7. LIBROS PRESTADOS POR CATEGORIA

CREATE OR REPLACE FUNCTION FN__PRESTADOS_CATEG(SP_CATEGORIA IN VARCHAR2)
RETURN NUMBER
IS
    VCONT NUMBER := 0;
BEGIN
    FOR PRESTAMO IN (SELECT * FROM PRESTAMOS WHERE ID_LIBRO IN (SELECT ID_LIBRO FROM LIBROS WHERE CATEGORIA = SP_CATEGORIA) AND FECHA_DEVOLUCION IS NULL)
    LOOP
        VCONT := VCONT + 1;
    END LOOP;
    
    RETURN VCONT;
END;


--8. PRESTAMOS ACTIVOS DEL USUARIO

CREATE OR REPLACE FUNCTION FN_PREST_ACTIVOS(SP_ID_USUARIO IN NUMBER) 
RETURN CHAR
IS
    VCONT NUMBER;
BEGIN
    FOR PRESTAMO IN (SELECT * 
                     FROM PRESTAMOS 
                     WHERE ID_USUARIO = SP_ID_USUARIO 
                     AND FECHA_DEVOLUCION IS NULL) 
    LOOP
        VCONT := VCONT + 1;
    END LOOP;
    
    IF VCONT > 0 THEN
        RETURN 'El usuario tiene ' || VCONT || 'préstamos activos';
    ELSE
        RETURN 'El usuario no tiene ningún préstamo activo';
    END IF;
END;


--9. LIBROS DISPONIBLES POR CATEGORIA

CREATE OR REPLACE FUNCTION FN_CAT_DISP(SP_CATEGORIA IN VARCHAR2)
RETURN VARCHAR2
IS
    VRES VARCHAR2(250);
BEGIN
    FOR LIBRO IN (SELECT TITULO FROM LIBROS WHERE CATEGORIA = SP_CATEGORIA AND DISPONIBLE = 'S')
    LOOP
        VRES := VRES || LIBRO.TITULO || ', ';
    END LOOP;
    IF VRES IS NULL THEN
        RETURN 'No hay libros disponibles en esta categoría';
    ELSE
        RETURN VRES;
    END IF;
END;

-- 10. TOTAL DE TODOS LOS LIBROS PRESTADOS

CREATE OR REPLACE FUNCTION FN_LIBROS_PRESTADOS 
RETURN NUMBER
IS
    VTOTAL NUMBER;
BEGIN
    SP_LIBROS_PRESTADOS(VTOTAL);
    
    IF VTOTAL <= 0 THEN
        RETURN 'No hay libros prestados';
    ELSE
        RETURN VTOTAL;
    END IF;
END;


-- 11. PRESTAMOS VENCIDAS

CREATE OR REPLACE FUNCTION FN_PRESTAMOS_VENCIDOS(SP_ID_USUARIO IN NUMBER)
RETURN NUMBER
IS
    VCONT NUMBER := 0;
BEGIN
    FOR PRESTAMO IN (SELECT * 
                     FROM PRESTAMOS 
                     WHERE ID_USUARIO = SP_ID_USUARIO 
                     AND FECHA_DEVOLUCION < SYSDATE 
                     AND FECHA_DEVOLUCION IS NOT NULL) 
    LOOP
        VCONT := VCONT + 1;
    END LOOP;
    
    RETURN VCONT;
END;
    
    
--12. LIBRO POR TITULO

CREATE OR REPLACE FUNCTION FN_LIBRO_POR_TITULO(SP_TITULO IN VARCHAR2)
RETURN VARCHAR2
IS
    VTITULO VARCHAR2(100);
BEGIN
    FOR LIBRO IN (SELECT TITULO FROM LIBROS WHERE TITULO = SP_TITULO)
    LOOP
        VTITULO := LIBRO.TITULO;
    END LOOP;
    
    IF VTITULO IS NULL THEN
        RETURN 'Lo siento. El libro no fue encontrado';
    ELSE
        RETURN VTITULO;
    END IF;
END;

--13. LIBROS MAS PRESTADOS

CREATE OR REPLACE FUNCTION FN_LIBROS_MAS_PRESTADOS
RETURN VARCHAR2
IS
    VRES VARCHAR2(255);
BEGIN
    FOR LIBRO IN (SELECT TITULO, COUNT(*) AS NUM_PRESTAMOS
                  FROM PRESTAMOS
                  JOIN LIBROS ON PRESTAMOS.ID_LIBRO = LIBROS.ID_LIBRO
                  GROUP BY TITULO
                  ORDER BY NUM_PRESTAMOS DESC)
    LOOP
        VRES := VRES || LIBRO.TITULO || ' - ' || LIBRO.NUM_PRESTAMOS || ' préstamos, ';
    END LOOP;
    
    IF VRES IS NULL THEN
        RETURN 'No hay libros prestados';
    ELSE
        RETURN VRES;
    END IF;
END;


--14. TIPO DE REPORTE POR ID

CREATE OR REPLACE FUNCTION FN_BUSCAR_TIPO_REPORTE(SP_ID_REPORTE IN NUMBER)
RETURN VARCHAR2
IS
    VREPORTE VARCHAR2(100);
BEGIN
    SELECT TIPO_REPORTE
    INTO VREPORTE
    FROM REPORTES
    WHERE ID_REPORTE = SP_ID_REPORTE;
    
    IF VREPORTE IS NULL THEN
        RETURN 'Reporte no encontrado';
    ELSE
        RETURN VREPORTE;
    END IF;
END;

--15. 


-- Procedimiento para cambiar el estado de un libro
CREATE OR REPLACE PROCEDURE SP_CAMBIAR_ESTADO_LIBRO (
    p_id_libro IN NUMBER,
    p_nuevo_estado IN CHAR
) AS
BEGIN
    UPDATE LIBROS
    SET DISPONIBLE = p_nuevo_estado
    WHERE ID_LIBRO = p_id_libro;
    COMMIT;
END;
/

-- Procedimiento para registrar un pago
CREATE OR REPLACE PROCEDURE SP_REGISTRAR_PAGO (
    p_id_pago IN NUMBER,
    p_id_usuario IN NUMBER,
    p_monto IN NUMBER,
    p_fecha_pago IN DATE
) AS
BEGIN
    INSERT INTO PAGOS (ID_PAGO, ID_USUARIO, MONTO, FECHA_PAGO)
    VALUES (p_id_pago, p_id_usuario, p_monto, p_fecha_pago);
    COMMIT;
END;
/

-- Procedimiento para asignar un rol a un usuario
CREATE OR REPLACE PROCEDURE SP_ASIGNAR_ROL_USUARIO (
    p_id_usuario IN NUMBER,
    p_nuevo_rol IN VARCHAR2
) AS
BEGIN
    UPDATE USUARIOS
    SET ROL = p_nuevo_rol
    WHERE ID_USUARIO = p_id_usuario;
    COMMIT;
END;
/

-- Procedimiento para extender la fecha de devolución de un préstamo
CREATE OR REPLACE PROCEDURE SP_EXTENDER_PRESTAMO (
    p_id_prestamo IN NUMBER,
    p_nueva_fecha IN DATE
) AS
BEGIN
    UPDATE PRESTAMOS
    SET FECHA_DEVOLUCION = p_nueva_fecha
    WHERE ID_PRESTAMO = p_id_prestamo;
    COMMIT;
END;
/

-- Procedimiento para generar un reporte de préstamos de un usuario
CREATE OR REPLACE PROCEDURE SP_REPORTE_PRESTAMOS_USUARIO (
    p_id_usuario IN NUMBER
) AS
    CURSOR c_prestamos IS
        SELECT ID_LIBRO, FECHA_PRESTAMO, FECHA_DEVOLUCION
        FROM PRESTAMOS
        WHERE ID_USUARIO = p_id_usuario;
BEGIN
    FOR prestamo_rec IN c_prestamos LOOP
        DBMS_OUTPUT.PUT_LINE('Libro: ' || prestamo_rec.ID_LIBRO || ' | Prestamo: ' || prestamo_rec.FECHA_PRESTAMO || ' | Devolución: ' || prestamo_rec.FECHA_DEVOLUCION);
    END LOOP;
END;
/

-- Función para calcular la multa total de un usuario
CREATE OR REPLACE FUNCTION FN_MULTA_USUARIO (
    p_id_usuario IN NUMBER
) RETURN NUMBER AS
    v_multa_total NUMBER := 0;
BEGIN
    SELECT SUM(GREATEST(SYSDATE - FECHA_DEVOLUCION, 0) * 500) INTO v_multa_total
    FROM PRESTAMOS
    WHERE ID_USUARIO = p_id_usuario AND FECHA_DEVOLUCION < SYSDATE;

    RETURN v_multa_total;
END;
/